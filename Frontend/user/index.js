const { createApp, ref } = Vue;

const app = createApp({
    setup() {
        window.auth.isLoggedIn();
        const activeIndex = ref('1');
        const linkList = ['index.html', 'index.html', 'event.html', 'consult.html', 'selfcenter.html'];
        const websites = ref(['‰∏ªÈ°µ', '‰∏ªÈ°µ', '‰∫ã‰ª∂Á∞ø', 'Âí®ËØ¢ÊúçÂä°', '‰∏™‰∫∫‰∏≠ÂøÉ']);
        const defaultAvatar = ref('https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png');
        const postContent = ref('');
        const selectedTags = ref([]);
        const visibleTags = ref([
            'ËêåÂØµÊó•Â∏∏', 'È§äÂØµÊäÄÂ∑ß', 'ÂØµÁâ©ÂÅ•Â∫∑', 'ÂØµÁâ©È£≤È£ü', 'ÂØµÁâ©ÁæéÂÆπ'
        ]);

        const moreTags = ref([
            'Ë≤ìÂí™Ë°åÁÇ∫', 'ÁãóÁãóË®ìÁ∑¥', 'ÂØµÁâ©ÈÜ´ÁôÇ', 'Áï∞ÂØµÈ£ºÈ§ä', 'ÂØµÁâ©ÂøÉÁêÜ',
            'Áñ´ËãóËàáÈ©ÖËü≤', 'ÂØµÁâ©‰øùÈö™', 'ÂØµÁâ©È†òÈ§ä', 'Ëµ∞Â§±ÂçîÂ∞ã', 'ÂØµÁâ©ÈÖçÂ∞ç',
            'ÂØµÁâ©Áî®ÂìÅ', 'ÂØµÁâ©ÊîùÂΩ±', 'ÂØµÁâ©ÊóÖÈÅä', 'ÂØµÁâ©Ë∂£‰∫ã', 'ÂØµÁâ©ËÄÅÂπ¥ÁÖßË≠∑'
        ]);

        const recommendedTags = ref([
            'ËêåÂØµÊó•Â∏∏', 'ÂØµÁâ©ÂÅ•Â∫∑', 'Ë≤ìÂí™Ë°åÁÇ∫', 'ÁãóÁãóË®ìÁ∑¥',
            'ÂØµÁâ©ÈÜ´ÁôÇ', 'ÂØµÁâ©ÁæéÂÆπ', 'Ëµ∞Â§±ÂçîÂ∞ã', 'ÂØµÁâ©È†òÈ§ä'
        ]);
        const showTagDropdown = ref(false);
        const filterUsers = ref([]);
        const selectedUser = ref(null);
        // ÂΩìÂâçÁî®Êà∑Êï∞ÊçÆ
        const currentUser = ref({
            id: 101,
            name: 'Âä†ËΩΩ‰∏≠...',
            avatar: '',
            followedCount: 0,
            followingCount: 0,
            postCount: 0
        })
        const filteredPosts = ref([
            {
                id: 1,
                author: {
                    id: 101,
                    name: 'Alice',
                    avatar: 'https://i.pravatar.cc/150?img=1',
                    isFollowing: true
                },
                textContent: '‰ªäÂ§©Â∏∂Ë≤ìÂí™ÂéªÊ¥óÊæ°ÔºåÁâ†Ë∂Ö‰πñÁöÑÔΩû üê±üõÅ',
                tags: ['ÂØµÁâ©', 'Êó•Â∏∏', 'Ë≤ìÂ•¥'],
                time: new Date(new Date().getTime() - 1000 * 60 * 60), // 1 Â∞èÊôÇÂâç
                likes: 12,
                commentCount: 2,
                coins: 1,
                isLiked: false,
                isCoined: false,
                showComments: false,
                comments: [
                    {
                        id: 201,
                        text: 'ÁúãËµ∑‰æÜÂ•Ω‰πæÊ∑®ÔºÅ',
                        time: new Date(new Date().getTime() - 1000 * 60 * 40),
                        user: {
                            name: 'Ben',
                            avatar: 'https://i.pravatar.cc/150?img=2'
                        }
                    },
                    {
                        id: 202,
                        text: '‰Ω†ÊòØÂú®Âì™Ë£°Ê¥óÁöÑÂëÄÔºü',
                        time: new Date(new Date().getTime() - 1000 * 60 * 20),
                        user: {
                            name: 'Carol',
                            avatar: 'https://i.pravatar.cc/150?img=3'
                        }
                    }
                ]
            },
            {
                id: 2,
                author: {
                    id: 102,
                    name: 'David',
                    avatar: 'https://i.pravatar.cc/150?img=4',
                    isFollowing: false
                },
                textContent: 'ÂâõË≤∑‰∫ÜÊñ∞ÁãóÁ≥ßË©¶Ë©¶ÁúãÔºåÁâ†Â±ÖÁÑ∂ÂÖ®ÂêÉÂÖâ‰∫ÜÔºÅüò≤üê∂',
                image: '/images/dog-food.jpg',
                tags: ['ÁãóÁãó', 'ÁîüÊ¥ªÂàÜ‰∫´'],
                time: new Date(new Date().getTime() - 1000 * 60 * 90), // 1.5 Â∞èÊôÇÂâç
                likes: 20,
                commentCount: 0,
                coins: 3,
                isLiked: true,
                isCoined: true,
                showComments: false,
                comments: []
            },
            {
                id: 3,
                author: {
                    id: 103,
                    name: 'Emma',
                    avatar: 'https://i.pravatar.cc/150?img=5',
                    isFollowing: true
                },
                textContent: 'Â§©Ê∞£Â•ΩÂ•ΩÔºå‰æÜÂÖ¨ÂúíÊõ¨Â§™ÈôΩ‚òÄÔ∏è #ÊîæÈ¨Ü',
                tags: ['Êó•Â∏∏', 'ÈôΩÂÖâ', 'Êï£Ê≠•'],
                time: new Date(new Date().getTime() - 1000 * 60 * 10), // 10 ÂàÜÈêòÂâç
                likes: 5,
                commentCount: 1,
                coins: 0,
                isLiked: false,
                isCoined: false,
                showComments: false,
                comments: [
                    {
                        id: 203,
                        text: 'ÁúüÁæ®ÊÖïÔºÅÊàëÈÇÑÂú®Ëæ¶ÂÖ¨ÂÆ§ üò≠',
                        time: new Date(new Date().getTime() - 1000 * 60 * 5),
                        user: {
                            name: 'Frank',
                            avatar: 'https://i.pravatar.cc/150?img=6'
                        }
                    }
                ]
            }
        ]);

        // Ê†ºÂºèÂåñÊó∂Èó¥
        const formatTime = (date) => {
            return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
        };

        const handleSelect = (key, keyPath) => {
            console.log(key, keyPath);
            window.location.href = linkList[key];
        };

        const toggleTagDropdown = () => {
        };

        const toggleLike = async (post) => {
            // await getPostDetail(post.id, currentUser.value.id)
            const wasLiked = post.isLiked
            post.isLiked = !wasLiked
            post.likes += post.isLiked ? 1 : -1


            // try {
            //     if (wasLiked) {
            //         await unlikePost(post.id, currentUser.value.id)
            //     } else {
            //         await likePost(post.id, currentUser.value.id)
            //     }
            // } catch (err) {
            //     post.isLiked = wasLiked
            //     post.likes = wasLiked ? post.likes : post.likes - 1
            //     console.error('Êìç‰ΩúÁÇπËµûÂ§±Ë¥•:', err)
            // }
        }

        const handleCommentClick = (post) => {
            if (post.comments.length > 10) {
                viewAllComments(post.id)
            } else {
                toggleComments(post)
            }
        };

        const viewAllComments = (postId) => {
            // router.push(`/post/${postId}/comments`)
        };

        const toggleComments = async (post) => {
            post.showComments = !post.showComments

            if (post.showComments && post.comments.length === 0) {
                try {
                    const response = await getPostDetail(post.id, currentUser.value.id)
                    post.comments = response.data.comments.map(comment => ({
                        id: comment.commentId,
                        user: {
                            id: comment.userId,
                            name: comment.userName,
                            avatar: comment.userAvatar
                        },
                        text: comment.content,
                        time: new Date(comment.createdAt)
                    }))
                } catch (err) {
                    console.error('Âä†ËΩΩËØÑËÆ∫Âá∫Èîô:', err)
                }
            }
        };

        const addComment = async (post) => {
            if (!post.newComment.trim()) return

            try {
                // const response = await commentPost({
                //     userId: currentUser.value.id,
                //     postId: post.id,
                //     content: post.newComment
                // })

                // Ê®°Êì¨Áî¢Áîü‰∏ÄÂÄãÂÅá ID
                const fakeCommentId = Date.now();

                // post.comments.unshift({
                //     id: response.data.commentId,
                //     user: { ...currentUser.value },
                //     text: post.newComment,
                //     time: new Date()
                // })

                // Êñ∞Â¢ûÊ®°Êì¨ÁïôË®Ä
                post.comments.unshift({
                    id: fakeCommentId,
                    user: { ...currentUser.value },
                    text: post.newComment,
                    time: new Date()
                });
                
                post.commentCount += 1;
                post.newComment = ''
            } catch (err) {
                console.error('ÂèëË°®ËØÑËÆ∫Â§±Ë¥•:', err)
            }
        }

        const toggleCoin = async (post) => {
            if (post.isCoined) {
                ElementPlus.ElMessage.primary('Â∑≤ÊäïÂ∏Å');
                return
            }
            //await getPostDetail(post.id, currentUser.value.id)

            try {
                //await coinPost(post.id, currentUser.value.id)
                post.isCoined = true
                post.coins += 1
            } catch (err) {
                console.error('Êìç‰ΩúÊäïÂ∏ÅÂ§±Ë¥•:', err)
            }
        };

        return {
            websites,
            activeIndex,
            handleSelect,
            defaultAvatar,
            postContent,
            selectedTags,
            visibleTags,
            showTagDropdown,
            moreTags,
            recommendedTags,
            toggleTagDropdown,
            filterUsers,
            selectedUser,
            filteredPosts,
            formatTime,
            currentUser,
            toggleLike,
            handleCommentClick,
            toggleCoin,
            addComment
        };
    }
});

// ‰ΩøÁî® ElementPlus
app.use(ElementPlus);

app.mount('#app');